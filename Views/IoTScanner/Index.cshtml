@model IEnumerable<Kutip.Models.Schedule>

@{
    ViewData["Title"] = "IoT License Plate Scanner";
    var todaysSchedules = ViewBag.TodaysSchedules as List<Kutip.Models.Schedule> ?? new List<Kutip.Models.Schedule>();
    var isOperator = ViewBag.IsOperator as bool? ?? false;
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

<style>
    .camera-container {
        position: relative;
        max-width: 640px;
        margin: 0 auto;
    }

    #video {
        width: 100%;
        height: auto;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    #canvas {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: auto;
        pointer-events: none;
    }

    .status-indicator {
        position: absolute;
        top: 10px;
        right: 10px;
        padding: 8px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: bold;
        z-index: 10;
    }

    .status-scanning {
        background: #ffc107;
        color: #000;
    }

    .status-success {
        background: #28a745;
        color: white;
    }

    .status-error {
        background: #dc3545;
        color: white;
    }

    .status-loading {
        background: #17a2b8;
        color: white;
    }

    .scan-result {
        margin-top: 20px;
        padding: 15px;
        border-radius: 8px;
        display: none;
    }

        .scan-result.success {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }

        .scan-result.error {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }

        .scan-result.loading {
            background: #d1ecf1;
            border: 1px solid #bee5eb;
            color: #0c5460;
        }

    .schedule-card {
        transition: all 0.3s ease;
        border-left: 4px solid #dee2e6;
    }

        .schedule-card.completed {
            border-left-color: #28a745;
            background: #f8fff9;
        }

        .schedule-card.in-progress {
            border-left-color: #ffc107;
            background: #fffdf5;
        }

    .btn-scan {
        background: linear-gradient(45deg, #28a745, #20c997);
        border: none;
        color: white;
        font-weight: bold;
        transition: all 0.3s ease;
    }

        .btn-scan:hover {
            background: linear-gradient(45deg, #218838, #1ea085);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

        .btn-scan:disabled {
            background: #6c757d;
            transform: none;
            box-shadow: none;
        }

    .manual-input-section {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 15px;
        margin-top: 15px;
    }

    /* Removed .debug-section style */

    .camera-info {
        background: #e3f2fd;
        border-radius: 8px;
        padding: 10px;
        margin-top: 10px;
        font-size: 12px;
    }
</style>

<div class="container-fluid p-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="mb-1">
                        <i class="fas fa-camera me-2 text-primary"></i>
                        IoT Bin Plate Scanner
                    </h1>
                    <p class="text-muted mb-0">Scan Bin Plate to automatically update pickup progress</p>
                </div>

            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8 mb-4">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-video me-2"></i>Camera Scanner
                    </h5>
                </div>
                <div class="card-body">
                    <div class="camera-container">
                        <video id="video" autoplay muted playsinline style="display: none;"></video>
                        <canvas id="canvas"></canvas>
                        <div id="statusIndicator" class="status-indicator status-loading">
                            <i class="fas fa-circle-notch fa-spin me-1"></i>
                            Checking browser compatibility...
                        </div>
                    </div>

                    <div class="text-center mt-3">
                        <button id="startScanBtn" class="btn btn-scan btn-lg me-2" disabled>
                            <i class="fas fa-play me-2"></i>Start Scanning
                        </button>
                        <button id="stopScanBtn" class="btn btn-outline-danger btn-lg" disabled>
                            <i class="fas fa-stop me-2"></i>Stop Scanning
                        </button>
                        <button id="retryInitBtn" class="btn btn-outline-warning btn-lg" style="display: none;">
                            <i class="fas fa-redo me-2"></i>Retry Setup
                        </button>
                        <button id="skipCameraBtn" class="btn btn-outline-info btn-lg" style="display: none;">
                            <i class="fas fa-keyboard me-2"></i>Skip Camera Setup
                        </button>
                    </div>



                    <div class="manual-input-section">
                        <h6><i class="fas fa-keyboard me-2"></i>Manual Input (Always Available)</h6>
                        <div class="input-group">
                            <input type="text" id="manualPlateInput" class="form-control"
                                   placeholder="Enter plate number manually (e.g., JBF4567)"
                                   maxlength="7" style="text-transform: uppercase;">
                            <button id="manualScanBtn" class="btn btn-primary">
                                <i class="fas fa-check me-1"></i>Process
                            </button>
                        </div>
                        <small class="text-muted">Format: 3 letters + 4 numbers (e.g., ABC1234)</small>
                    </div>
                    <div id="scanResult" class="scan-result">
                        <div id="scanMessage"></div>
                    </div>
                    <div id="cameraInfo" class="camera-info" style="display: none;">
                        <strong>Camera Information:</strong>
                        <div id="cameraDetails">No camera information available</div>
                    </div>


                </div>
            </div>
        </div>

        <div class="col-lg-4 mb-4">
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-calendar-day me-2"></i>Today's Schedules
                    </h5>
                </div>
                <div class="card-body p-0" style="max-height: 500px; overflow-y: auto;">
                    <div id="schedulesContainer">
                        @if (todaysSchedules.Any())
                        {
                            @foreach (var schedule in todaysSchedules)
                            {
                                var isCompleted = schedule.PickedUpBins >= schedule.TotalBins;
                                var cardClass = isCompleted ? "completed" : "in-progress";

                                <div class="schedule-card @cardClass p-3 border-bottom" data-schedule-id="@schedule.s_ID">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div class="flex-grow-1">
                                            <h6 class="mb-1 fw-bold">@schedule.Bin?.b_PlateNo</h6>
                                            <p class="mb-1 text-muted small">
                                                <i class="fas fa-map-marker-alt me-1"></i>
                                                @(schedule.Location?.l_Address1 ?? "Unknown Location")
                                            </p>
                                            <p class="mb-0 text-muted small">
                                                <i class="fas fa-user me-1"></i>
                                                @(schedule.AssignedUser?.Name ?? "Unassigned")
                                            </p>
                                        </div>
                                        <div class="text-end">
                                            <span class="badge @(isCompleted ? "bg-success" : "bg-warning text-dark")">
                                                @schedule.PickedUpBins/@schedule.TotalBins
                                            </span>
                                            @if (isCompleted)
                                            {
                                                <div class="mt-1">
                                                    <i class="fas fa-check-circle text-success"></i>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center p-4 text-muted">
                                <i class="fas fa-calendar-times fa-2x mb-2"></i>
                                <div>No schedules for today</div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let tesseractLoaded = false;

    (function() {
        const script = document.createElement('script');
        script.src = 'https://unpkg.com/tesseract.js@v4.1.1/dist/tesseract.min.js';
        script.onerror = function() {
            console.error('Failed to load Tesseract.js from CDN');
            updateStatus('OCR library failed to load', 'error');
        };
        script.onload = function() {
            tesseractLoaded = true;
            console.log('Tesseract.js loaded successfully');
        };
        document.head.appendChild(script);
    })();
</script>

<script>
    let video, canvas, ctx;
    let isScanning = false;
    let tesseractWorker = null;
    let scanInterval = null;
    let initializationAttempts = 0;
    const maxInitAttempts = 3;
    let cameraStream = null;

    function checkBrowserCompatibility() {
        const issues = [];
        const info = [];

        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            issues.push("Camera access not supported");
        } else {
            info.push("✅ Camera API supported");
        }

        if (!window.Worker) {
            issues.push("Web Workers not supported");
        } else {
            info.push("✅ Web Workers supported");
        }

        if (!HTMLCanvasElement.prototype.toBlob) {
            issues.push("Canvas blob conversion not supported");
        } else {
            info.push("✅ Canvas blob supported");
        }

        if (location.protocol !== 'https:' && location.hostname !== 'localhost') {
            issues.push("HTTPS required for camera access");
        } else {
            info.push("✅ Secure context available");
        }

        return issues;
    }

    async function getCameraInfo() {
        try {
            const devices = await navigator.mediaDevices.enumerateDevices();
            const videoDevices = devices.filter(device => device.kind === 'videoinput');

            const cameraDetails = document.getElementById('cameraDetails');
            if (cameraDetails) {
                if (videoDevices.length > 0) {
                    cameraDetails.innerHTML = videoDevices.map((device, index) =>
                        `Camera ${index + 1}: ${device.label || 'Unknown Camera'}`
                    ).join('<br>');
                    document.getElementById('cameraInfo').style.display = 'block';
                } else {
                    cameraDetails.innerHTML = 'No cameras detected';
                    document.getElementById('cameraInfo').style.display = 'block';
                }
            }

            return videoDevices;
        } catch (error) {
            return [];
        }
    }

    async function initializeScanner() {
        try {
            initializationAttempts++;
            updateStatus('Checking system compatibility...', 'loading');

            const compatibilityIssues = checkBrowserCompatibility();
            if (compatibilityIssues.length > 0) {
                throw new Error(`Browser compatibility issues: ${compatibilityIssues.join(', ')}`);
            }

            video = document.getElementById('video');
            canvas = document.getElementById('canvas');
            ctx = canvas.getContext('2d');

            updateStatus('Checking cameras...', 'loading');
            const cameras = await getCameraInfo();
            if (cameras.length === 0) {
                throw new Error('No cameras detected on this device');
            }

            updateStatus('Loading OCR engine...', 'loading');

            let waitCount = 0;
            while (!tesseractLoaded && typeof Tesseract === 'undefined' && waitCount < 50) {
                await new Promise(resolve => setTimeout(resolve, 100));
                waitCount++;
            }

            if (typeof Tesseract === 'undefined') {
                throw new Error('Tesseract.js failed to load after waiting');
            }

            tesseractWorker = await Tesseract.createWorker({
                logger: m => {
                    if (m.status === 'recognizing text') {
                    }
                }
            });


            await tesseractWorker.load();
            await tesseractWorker.loadLanguage('eng');
            await tesseractWorker.initialize('eng');

            await tesseractWorker.setParameters({
                tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',
                tessedit_pageseg_mode: '3',
                preserve_interword_spaces: '0'
            });

            updateStatus('Requesting camera access...', 'loading');

            const constraints = {
                video: {
                    width: { ideal: 1280, min: 640 },
                    height: { ideal: 720, min: 480 },
                    facingMode: 'environment'
                }
            };

            cameraStream = await navigator.mediaDevices.getUserMedia(constraints);

            video.srcObject = cameraStream;
            video.style.display = 'block';

            await new Promise((resolve) => {
                video.onloadedmetadata = () => {
                    canvas.width = video.videoWidth;
                    canvas.height = video.videoHeight;
                    resolve();
                };
            });

            document.getElementById('startScanBtn').addEventListener('click', startScanning);
            document.getElementById('stopScanBtn').addEventListener('click', stopScanning);

            updateStatus('Ready to scan', 'scanning');
            document.getElementById('startScanBtn').disabled = false;
            document.getElementById('stopScanBtn').disabled = false;
            document.getElementById('retryInitBtn').style.display = 'none';
            document.getElementById('skipCameraBtn').style.display = 'none';

        } catch (error) {
            const errorMessage = error?.message || error?.toString() || 'Unknown initialization error';
            console.error('Initialization error:', error);
            updateStatus('Camera setup failed', 'error');

            if (initializationAttempts < maxInitAttempts) {
                document.getElementById('retryInitBtn').style.display = 'inline-block';
            } else {
            }

            document.getElementById('skipCameraBtn').style.display = 'inline-block';
        }
    }

    function preprocessImage(ctx, width, height) {

        ctx.filter = 'contrast(1.2) brightness(1.1)';
        ctx.drawImage(ctx.canvas, 0, 0);
        ctx.filter = 'none';
    }

    function validatePlateNumber(rawText) {
        let cleanText = rawText.replace(/[^A-Z0-9]/g, '').trim();

        if (cleanText.length !== 7) return null;

        const letters = cleanText.substring(0, 3);
        const numbers = cleanText.substring(3);

        if (!/^[A-Z]{3}$/.test(letters)) return null;

        if (!/^\d{4}$/.test(numbers)) return null;

        return letters + numbers;
    }

    function startScanning() {
        if (isScanning) return;

        isScanning = true;
        updateStatus('Scanning...', 'scanning');
        document.getElementById('startScanBtn').disabled = true;
        document.getElementById('stopScanBtn').disabled = false;

        scanInterval = setInterval(async () => {
            try {
                ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

                preprocessImage(ctx, canvas.width, canvas.height);

                const fullImageDataUrl = canvas.toDataURL('image/jpeg', 0.8);

                canvas.toBlob(async (blob) => {
                    try {
                        const result = await tesseractWorker.recognize(blob);

                        const plateNumber = validatePlateNumber(result.data.text);

                        if (plateNumber) {
                            stopScanning();
                            await processScan(plateNumber, 'camera', fullImageDataUrl);
                        } else {
                        }
                    } catch (ocrError) {
                    }
                }, 'image/jpeg', 0.9);

            } catch (error) {
            }
        }, 2000);
    }

    function stopScanning() {
        if (!isScanning) return;

        clearInterval(scanInterval);
        isScanning = false;
        updateStatus('Scanning stopped', 'scanning');
        document.getElementById('startScanBtn').disabled = false;
        document.getElementById('stopScanBtn').disabled = true;
    }

    function updateStatus(message, type) {
        const indicator = document.getElementById('statusIndicator');
        if (!indicator) return;

        indicator.className = `status-indicator status-${type}`;

        let icon = 'fa-circle-notch fa-spin';
        if (type === 'success') icon = 'fa-check-circle';
        else if (type === 'error') icon = 'fa-exclamation-circle';
        else if (type === 'scanning') icon = 'fa-search';
        else if (type === 'loading') icon = 'fa-circle-notch fa-spin';

        indicator.innerHTML = `<i class="fas ${icon} me-1"></i>${message}`;
    }

    async function processScan(plateNumber, source = 'manual', imageDataUrl = null) {
        try {
            if (!plateNumber || plateNumber.length !== 7) {
                throw new Error('Invalid plate number format (expected 3 letters + 4 numbers)');
            }

            const cleanPlateNumber = plateNumber.trim().toUpperCase();

            updateStatus(`Processing ${cleanPlateNumber}...`, 'scanning');

            const scanResult = document.getElementById('scanResult');
            scanResult.className = 'scan-result loading';
            scanResult.innerHTML = '<div id="scanMessage"><i class="fas fa-spinner fa-spin me-2"></i>Processing scan...</div>';
            scanResult.style.display = 'block';

            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            if (!token) {
                throw new Error('Security token not found');
            }

            const response = await fetch('@Url.Action("ProcessScan", "IoTScanner")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({
                    plateNumber: cleanPlateNumber,
                    imageDataUrl: imageDataUrl
                })
            });


            if (!response.ok) {
                throw new Error(`Server error: ${response.status} ${response.statusText}`);
            }

            const result = await response.json();

            if (result.success) {
                updateStatus(`Success: ${cleanPlateNumber}`, 'success');
                showScanResult(result.message, 'success');

                if (result.scheduleId) {
                    updateScheduleCard(
                        result.scheduleId,
                        result.pickedUpBins,
                        result.totalBins,
                        result.isCompleted
                    );

                }

                if (source === 'manual') {
                    document.getElementById('manualPlateInput').value = '';
                }
            } else {
                updateStatus(`${cleanPlateNumber} Invalid`, 'error');
                showScanResult(result.message, 'error');
            }

        } catch (error) {
            const errorMessage = error?.message || 'Unknown processing error';
            console.error('Error processing scan:', error);
            updateStatus('Processing error', 'error');
            showScanResult(`Error: ${errorMessage}`, 'error');
        }
    }

    function showScanResult(message, type) {
        const resultDiv = document.getElementById('scanResult');
        const messageDiv = document.getElementById('scanMessage');

        if (resultDiv && messageDiv) {
            resultDiv.className = `scan-result ${type}`;
            messageDiv.innerHTML = `<i class="fas fa-${type === 'success' ? 'check' : 'exclamation-triangle'} me-2"></i>${message}`;
            resultDiv.style.display = 'block';

            setTimeout(() => {
                resultDiv.style.display = 'none';
            }, 5000);
        }
    }

    function updateScheduleCard(scheduleId, pickedUpBins, totalBins, isCompleted) {
        const card = document.querySelector(`[data-schedule-id="${scheduleId}"]`);
        if (card) {
            const badge = card.querySelector('.badge');
            const checkIcon = card.querySelector('.fa-check-circle');

            if (badge) {
                badge.textContent = `${pickedUpBins}/${totalBins}`;
                badge.className = `badge ${isCompleted ? 'bg-success' : 'bg-warning text-dark'}`;
            }

            if (isCompleted) {
                card.className = card.className.replace('in-progress', 'completed');
                if (!checkIcon) {
                    const iconDiv = document.createElement('div');
                    iconDiv.className = 'mt-1';
                    iconDiv.innerHTML = '<i class="fas fa-check-circle text-success"></i>';
                    card.querySelector('.text-end').appendChild(iconDiv);
                }
            }

            const schedulesContainer = document.getElementById('schedulesContainer');
            if (schedulesContainer && card !== schedulesContainer.firstElementChild) {
                schedulesContainer.prepend(card);
            }
        }
    }

    async function refreshSchedulesList() {
        try {
            const response = await fetch('@Url.Action("GetTodaysSchedules", "IoTScanner")');

            if (response.ok) {
                const result = await response.json();
                if (result.success && result.schedules) {
                    result.schedules.forEach(schedule => {
                        updateScheduleCard(
                            schedule.scheduleId,
                            schedule.pickedUpBins,
                            schedule.totalBins,
                            schedule.isCompleted
                        );
                    });
                }
            }
        } catch (error) {
        }
    }

    document.addEventListener('DOMContentLoaded', function() {

        document.getElementById('manualScanBtn').addEventListener('click', function() {
            const plateNumber = document.getElementById('manualPlateInput').value.trim();
            if (plateNumber) {
                processScan(plateNumber, 'manual', null);
            } else {
                showScanResult('Please enter a plate number', 'error');
            }
        });

        document.getElementById('manualPlateInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                document.getElementById('manualScanBtn').click();
            }
        });

        document.getElementById('manualPlateInput').addEventListener('input', function(e) {
            let value = e.target.value.toUpperCase().replace(/[^A-Z0-9]/g, '');
            if (value.length > 7) value = value.substring(0, 7);
            e.target.value = value;
        });

        document.getElementById('retryInitBtn').addEventListener('click', function() {
            this.style.display = 'none';
            document.getElementById('skipCameraBtn').style.display = 'none';
            initializeScanner();
        });

        document.getElementById('skipCameraBtn').addEventListener('click', function() {
            updateStatus('Camera skipped - Manual mode only', 'scanning');
            document.getElementById('retryInitBtn').style.display = 'none';
            this.style.display = 'none';
        });

        initializeScanner();
    });

    window.addEventListener('beforeunload', async function() {
        if (cameraStream) {
            cameraStream.getTracks().forEach(track => track.stop());
        }
        if (tesseractWorker) {
            await tesseractWorker.terminate();
        }
    });
</script>

@Html.AntiForgeryToken()
